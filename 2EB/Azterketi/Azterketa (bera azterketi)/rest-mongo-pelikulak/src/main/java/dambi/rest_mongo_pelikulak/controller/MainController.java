package dambi.rest_mongo_pelikulak.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import dambi.rest_mongo_pelikulak.model.Pelikula;
import dambi.rest_mongo_pelikulak.model.PelikulaRepository;

@RestController // This means that this class is a Controller baina @Controller bakarrik jarrita, PUT eta DELETEak ez dabiz
@RequestMapping(path = "/filmoteka")
public class MainController {
	@Autowired // This means to get the bean called pelikulaRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private PelikulaRepository pelikulaRepository;

	
	@GetMapping(path = "/peliGuztiak")
	public @ResponseBody Iterable<Pelikula> getAllUsers() {
		// This returns a JSON or XML with the users
		return pelikulaRepository.findAll();
	}


	//peliById/{id}
	@GetMapping(path = "/peliById/{id}")
	public @ResponseBody Pelikula get1Users(@PathVariable String id) {
		// This returns a JSON or XML with the users
		return pelikulaRepository.findById(id);
	}





	//aktorearenak/{aktorea}
	@GetMapping(path = "/aktorearenak/{aktorea}")
	public @ResponseBody Pelikula getAktorePelikula(@PathVariable String aktorea) {
		// This returns a JSON or XML with the users
		return pelikulaRepository.findByActor(aktorea);
	}



	//berriagoak/{urtea}
	@GetMapping(path = "/berriagoak/{urtea}")
	public @ResponseBody Pelikula getUrteaPelikula(@PathVariable String urtea) {
		// This returns a JSON or XML with the users
		return pelikulaRepository.findByYear(urtea);
	}





	//zuzendariarenak/{zuzendaria}
	@GetMapping(path = "/zuzendariarenak/{zuzendaria}")
	public @ResponseBody Pelikula getZuzendariaPelikula(@PathVariable String zuzendaria) {
		// This returns a JSON or XML with the users
		return pelikulaRepository.findByZuzendari(zuzendaria);
	}








	//zuzendariak
	@GetMapping(path = "/zuzendariak")
	public @ResponseBody Iterable<Pelikula> getAllZuzendariak() {
		// This returns a JSON or XML with the users
		return pelikulaRepository.findByZuzendaria();
	}








	@PostMapping(path = "/peliberria")
	public @ResponseBody String addNewPelikula(@RequestParam String title, @RequestParam String year, @RequestParam List<String> director, @RequestParam List<String> cast) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Pelikula u = new Pelikula();
		u.setTitle(title);
		u.setYear(year);
		u.setDirector(director);
		u.setCast(cast);
		pelikulaRepository.save(u);
		return "Saved";
	}

	//kastinaosatzen
	
	/*@PutMapping(value = "/opariberria/{pelikulaId}")
	public ResponseEntity<Pelikula> updatePelikula(@Valid @RequestBody String opBerria, @PathVariable String pelikulaId) {
		try {
			Pelikula pelikula= pelikulaRepository.findById(pelikulaId);
			List<String> director=pelikula.getDirector();
			director.add(opBerria);
			pelikula.setDirector(director);
			pelikulaRepository.save(pelikula);

			return ResponseEntity.ok().build();

		} catch (Exception ex) {
			return ResponseEntity.notFound().build();
		}
	}*/

	@DeleteMapping(path = "/delete/{id}")//delete/{pelikularenTitle}
	public ResponseEntity<Void> deletePelikula(@PathVariable String pelikularenTitle) {
		try {
			long zenbat = pelikulaRepository.delete(pelikularenTitle);
			System.out.println("Ezabatutako pelikula kopuruaðŸ”†: "+zenbat);
			return ResponseEntity.ok().build();

		} catch (Exception ex) {
			System.out.println("Errorea " + pelikularenTitle + " pelikula ezabatzerakoan. ");
			return ResponseEntity.notFound().build();
		}
	}   
}